#!/usr/bin/env bash
#ddev-generated
# Schema-driven GitHub environment setup with wizard mode
# Usage: dw-gh-env [ENV] [--debug] [--lazy] [--dry-run]

set -euo pipefail

# Script directory and main env file
SCRIPT_DIR="$(dirname "$0")"
readonly SCRIPT_DIR
readonly ENV_FILE=".env"
source "${SCRIPT_DIR}/lib/common.sh"

# Import the new libraries
source "${SCRIPT_DIR}/lib/schema-parser.sh"
source "${SCRIPT_DIR}/lib/env-validator.sh"
source "${SCRIPT_DIR}/lib/env-wizard.sh"
source "${SCRIPT_DIR}/lib/github-uploader.sh"
source "${SCRIPT_DIR}/lib/env-loader-simple.sh"

# Global flags
DEBUG=false
LAZY_MODE=false
PARSED_ARGS=()

show_help() {
  cat <<EOF
dw-gh-env: Schema-driven GitHub environment setup with wizard mode
Usage: ddev dw-gh-env [ENV] [--debug] [--lazy] [--dry-run] [--verbose]

Options:
  --debug      Show detailed debug information
  --lazy       Accept all defaults without prompting
  --dry-run    Skip GitHub upload (for testing)
  --verbose    Show extra info output
EOF
}

main() {
  export NO_COLOR=1
  parse_args "$@"

  # Parse schema first to get available variables
  parse_env_schema false
  debug "Schema parsed: LOCAL_REQUIRED_VARS has ${#LOCAL_REQUIRED_VARS[@]} items, ENV_REQUIRED_VARS has ${#ENV_REQUIRED_VARS[@]} items"

  # Ensure .env file exists
  if [[ ! -f $ENV_FILE ]]; then
    touch "$ENV_FILE"
    log_info "Created new .env file"
  fi

  # Start the new deployment environment wizard
  deployment_environment_wizard

  # Check if environments are complete (excluding GitHub variables)
  debug "Checking if environments are complete (excluding GitHub variables)"
  if ! is_environments_complete; then
    # Try to complete incomplete environments interactively
    if ! complete_incomplete_environments; then
      return 1
    fi
  fi

  log_ok "Environment configuration complete"

  # Setup GitHub variables if needed
  setup_github_variables

  # Load environment variables and upload
  load_selected_environment
  debug "✓ Environment loaded successfully"
  upload_to_github
  debug "✓ Upload process completed"
}

# CLI parsing and debug helpers
parse_args() {
  while (($# > 0)); do
    case "$1" in
    --help)
      show_help
      exit 0
      ;;
    --debug)
      DEBUG=true
      ;;
    --lazy)
      LAZY_MODE=true
      ;;
    --dry-run)
      DRY_RUN=true
      ;;
    --verbose)
      VERBOSE=true
      ;;
    -*)
      log_error "Unknown option: $1"
      exit 1
      ;;
    *)
      PARSED_ARGS+=("$1")
      ;;
    esac
    shift
  done
  export DEBUG DRY_RUN LAZY_MODE VERBOSE
}

# Backup env file if it exists and is non-empty
backup_env_file() {
  if [[ -f $ENV_FILE && -s $ENV_FILE ]]; then
    TIMESTAMP=$(date +"%Y%m%d%H%M%S")
    log_info "Backing up existing $ENV_FILE to $ENV_FILE.backup.$TIMESTAMP"
    cp $ENV_FILE "$ENV_FILE.backup.$TIMESTAMP"
  fi
}

# Load all configured environments
load_selected_environment() {
  debug "Loading all configured environments from .env file"

  # The new wizard configures all environments, so we use local mode
  # to skip the old environment selection logic
  local load_options="--skip-schema-parse --local"

  if load_environment "" "$load_options"; then
    debug "✓ Environment loading completed successfully"
    return 0
  else
    local exit_code=$?
    debug "❌ Environment loading failed with exit code: $exit_code"
    return $exit_code
  fi
}

# Upload to GitHub (or dry run)
upload_to_github() {
  if [[ "${DRY_RUN:-false}" == true ]]; then
    log_ok "Dry run mode - skipping GitHub upload"
  else

    if [[ "$LAZY_MODE" != true ]]; then
      log_ask "Proceed with upload? [Y/n]: "
      read -r confirm
      confirm=${confirm:-y}
      if [[ ! "$confirm" =~ ^[Yy] ]]; then
        log_info "Upload cancelled by user."
        return 1
      fi
    fi
    upload_github_data
  fi
}

main "$@"
