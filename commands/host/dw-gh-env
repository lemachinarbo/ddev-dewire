#!/bin/bash
#
# Schema-driven GitHub environment setup with wizard mode
# Usage: dw-gh-env [ENV] [--debug] [--dontaskme]

set -euo pipefail

readonly SCRIPT_DIR="$(dirname "$0")"
source "${SCRIPT_DIR}/lib/common.sh"

# Import the new libraries
source "${SCRIPT_DIR}/lib/schema-parser.sh"
source "${SCRIPT_DIR}/lib/env-validator.sh"
source "${SCRIPT_DIR}/lib/env-wizard.sh"
source "${SCRIPT_DIR}/lib/github-uploader.sh"
source "${SCRIPT_DIR}/lib/env-loader-simple.sh"

# Global flags
DEBUG=false
DONTASKME=false
SETUP_MODE="all"
PARSED_ARGS=()

show_help() {
  cat << EOF
dw-gh-env: Schema-driven GitHub environment setup with wizard mode
Usage: ddev dw-gh-env [ENV] [--debug] [--dontaskme]

Options:
  --debug      Show detailed debug information
  --dontaskme  Skip all prompts, only upload schema-defined vars
  --dry-run    Skip GitHub upload (for testing)
EOF
}

main() {
  export NO_COLOR=1
  
  parse_args "$@"
  
  if [[ ! -f ".env" ]]; then
    wizard_mode
  else
    # Parse schema first to populate variable arrays
    debug "Parsing schema for existing .env file"
    parse_env_schema false
    
    # Check if .env file is incomplete and fix if needed
    debug "Checking if .env file is complete"
    if ! is_env_complete ".env"; then
      debug ".env file is incomplete - starting fix process"
      log_info "Incomplete .env file detected. Fixing missing variables..."
      
      # Determine setup mode based on existing variables or prompt user
      if [[ -z "${SETUP_MODE:-}" ]]; then
        determine_setup_mode ".env"
      fi
      debug "Using setup mode: $SETUP_MODE"
      
      # Always re-parse schema with the determined mode
      debug "Re-parsing schema for mode: $SETUP_MODE"
      parse_env_schema false
      
      fix_incomplete_env ".env"
      log_ok "Variables fixed. Proceeding with environment loading..."
    else
      debug ".env file is complete"
    fi
    
    # Now load the environment (with validation)
    # For GitHub setup, use the first environment if none specified
    local env_arg="${PARSED_ARGS[0]:-}"
    if [[ -z "$env_arg" ]]; then
      local environments
      if environments=$(get_env_environments ".env"); then
        if [[ -n "$environments" ]]; then
          # Use the first environment as default
          env_arg=$(echo "$environments" | cut -d' ' -f1 | tr -d '"')
          debug "Auto-selecting environment: $env_arg"
        fi
      fi
    fi
    load_environment "$env_arg"
  fi
  
  # Upload to GitHub
  if [[ "${DRY_RUN:-false}" == true ]]; then
    log_ok "Dry run mode - skipping GitHub upload"
  else
    upload_github_data
  fi
}

parse_args() {
  while (( $# > 0 )); do
    case "$1" in
      --help) show_help; exit 0 ;;
      --debug) DEBUG=true ;;
      --dontaskme) DONTASKME=true ;;
      --dry-run) DRY_RUN=true ;;
      -*) log_error "Unknown option: $1"; exit 1 ;;
      *) PARSED_ARGS+=("$1") ;;
    esac
    shift
  done
  export DEBUG DONTASKME DRY_RUN
}

debug() {
  [[ "$DEBUG" == true ]] && log_info "$*" || true
}

wizard_mode() {
  log_header "DeWire Environment Setup Wizard v2"
  log_info "No .env file found. Setting up environment."
  
  parse_env_schema false
  log_ok "Schema loaded: ${#REQUIRED_VARS[@]} required, ${#LOCAL_REQUIRED_VARS[@]} local, ${#ENV_REQUIRED_VARS[@]} env variables"
  
  if [[ -f ".env.setup" ]]; then
    log_ok "Loading values from .env.setup"
    ENV_FILE=".env.setup"
  fi
  
  # Parse DEWIRE flags
  local dewire_allow dewire_ask
  dewire_allow=$(get_env_var "" "DEWIRE_ALLOW_CUSTOM_VARS" "${ENV_FILE:-}" 2>/dev/null || echo "true")
  dewire_ask=$(get_env_var "" "DEWIRE_ASK_ON_CUSTOM_VARS" "${ENV_FILE:-}" 2>/dev/null || echo "true")
  export DEWIRE_ALLOW_CUSTOM_VARS="$dewire_allow"
  export DEWIRE_ASK_ON_CUSTOM_VARS="$dewire_ask"
  
  choose_setup_mode "${PARSED_ARGS[@]}"
  generate_env
  
  ENV_FILE=".env"
  load_environment "${PARSED_ARGS[0]:-}" "--skip-validation"
}

main "$@"
