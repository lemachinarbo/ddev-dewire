#!/usr/bin/env bash
#ddev-generated
## Description: Split config.php into config-local.php for a selected environment
## Usage: dw-config-split [ENV]

set -euo pipefail
trap 'log_error "Command \"$BASH_COMMAND\" failed at line $LINENO"; exit 1' ERR

SITE_DIR="$DDEV_DOCROOT/site"
CONFIG_MAIN="$SITE_DIR/config.php"
LOCAL_CONFIG="$SITE_DIR/config-local.php"
TMP_CONFIG="$CONFIG_MAIN.tmp"

# Source common logging/colors and helpers
source "$(dirname "$0")/lib/common.sh"

if [[ "${1:-}" == "--help" ]]; then
    echo "dw-config-split: Split config.php into config-local.php for a selected environment."
    echo "Usage: ddev dw-config-split [ENV] [--silent]"
    exit 0
fi

main() {
    # Parse script arguments
    parse_script_args "$@"
    
    validate_and_load_env "${PARSED_ARGS[0]:-}" "$SILENT_FLAG"
    check_site_directory
    generate_salt_if_missing
    if ! ask_overwrite "$LOCAL_CONFIG" "config-local.php"; then
        SKIP_LOCAL_CONFIG=1
    else
        SKIP_LOCAL_CONFIG=0
    fi
    create_deploy_config
    create_local_config
    remove_config_lines_from_main
    add_require_to_config
    remove_comments_from_config
    final_cleanup
    upload_salts_to_github
}

# Write a config line to config-local.php
write_config_line() {
    local var="$1"
    local value="$2"
    if [[ "$var" != "httpHosts" && "$var" != "debug" ]]; then
        value="${value#\'}"
        value="${value%\'}"
        echo "\$config->$var = '$value';" >>"$LOCAL_CONFIG"
    else
        echo "\$config->$var = $value;" >>"$LOCAL_CONFIG"
    fi
}

check_site_directory() {
    if [ ! -d "$SITE_DIR" ]; then
        log_error "Directory public/site does not exist. Skipping config-local.php setup."
        exit 1
    fi
}

generate_salt_if_missing() {
    # Handle both userAuthSalt and tableSalt
    generate_salt_for_type "USER_AUTH_SALT" "userAuthSalt"
    generate_salt_for_type "TABLE_SALT" "tableSalt"
}

generate_salt_for_type() {
    local env_var_name="$1"  # e.g., "USER_AUTH_SALT"
    local config_var_name="$2"  # e.g., "userAuthSalt"
    local salt_var="${PREFIX}${env_var_name}"
    local salt_value=$(eval "echo \${$salt_var:-}")
    
    # If not in environment, try to extract from existing config.php.bak
    if [ -z "$salt_value" ] && [ -f "$CONFIG_MAIN.bak" ]; then
        salt_value=$(awk -v var="$config_var_name" '
            $0 ~ "\\$config->"var"[[:space:]]*=[[:space:]]*" {
                sub(/^[^=]*=[[:space:]]*/, "", $0);
                sub(/;.*$/, "", $0);
                gsub(/['\''"]/, "", $0);
                gsub(/[[:space:]]/, "", $0);
                print $0;
                exit
            }
        ' "$CONFIG_MAIN.bak")
        
        if [ -n "$salt_value" ]; then
            if [ "$SILENT_FLAG" != "--silent" ]; then
                log_ok "Found existing $config_var_name in config.php.bak: ${salt_value:0:8}..."
            fi
            # Store in environment variable for this session
            export ${salt_var}="$salt_value"
        fi
    fi
    
    # Generate new salt if still missing
    if [ -z "$salt_value" ]; then
        salt_value=$(openssl rand -base64 40)
        export ${salt_var}="$salt_value"
        if [ "$SILENT_FLAG" != "--silent" ]; then
            log_ok "Generated new $config_var_name for $ENV: ${salt_value:0:8}..."
        fi
    fi
    
    # Note: We no longer store salts in .env file for security reasons
    # Salts will be pushed to GitHub environment secrets instead
}

ask_overwrite() {
    local file="$1"
    local label="$2"
    if [ -f "$file" ]; then
        echo
        log_ask "$label already exists. Overwrite? [y/N]: "
        read -r OVERWRITE
        OVERWRITE=${OVERWRITE:-n}
        if [[ ! $OVERWRITE =~ ^[Yy]$ ]]; then
            log_warn "Skipped: $label was not overwritten."
            return 1
        fi
    fi
    return 0
}

create_deploy_config() {
    ENV_LOWER=$(to_lower "$ENV")
    DEPLOY_CONFIG="$SITE_DIR/config-local-$ENV_LOWER.php"

    # Get variables from environment (set by generate_salt_if_missing) or .env file
    DB_HOST=$(get_env_var "$PREFIX" DB_HOST "$ENV_FILE")
    DB_NAME=$(get_env_var "$PREFIX" DB_NAME "$ENV_FILE")
    DB_USER=$(get_env_var "$PREFIX" DB_USER "$ENV_FILE")
    DB_PASS=$(get_env_var "$PREFIX" DB_PASS "$ENV_FILE")
    DB_PORT=$(get_env_var "$PREFIX" DB_PORT "$ENV_FILE")
    DB_CHARSET=$(get_env_var "$PREFIX" DB_CHARSET "$ENV_FILE")
    DB_ENGINE=$(get_env_var "$PREFIX" DB_ENGINE "$ENV_FILE")
    
    # Get salts from environment variables (set by generate_salt_if_missing)
    USER_AUTH_SALT_VAR="${PREFIX}USER_AUTH_SALT"
    TABLE_SALT_VAR="${PREFIX}TABLE_SALT"
    USER_AUTH_SALT="${!USER_AUTH_SALT_VAR}"
    TABLE_SALT="${!TABLE_SALT_VAR}"
    
    HOST=$(get_env_var "$PREFIX" HOST "$ENV_FILE")

    # Normalize debug flag
    DB_DEBUG_RAW=$(get_env_var "$PREFIX" DEBUG "$ENV_FILE")
    DB_DEBUG=$(to_lower "${DB_DEBUG_RAW:-false}")

    # Generate config file
    cat >"$DEPLOY_CONFIG" <<EOF
<?php
// This file is generated for deployment and should be uploaded/renamed on the server.
// Do not use as your local config-local.php!

\$config->dbHost = '$DB_HOST';
\$config->dbName = '$DB_NAME';
\$config->dbUser = '$DB_USER';
\$config->dbPass = '$DB_PASS';
\$config->dbPort = '$DB_PORT';
\$config->dbCharset = '$DB_CHARSET';
\$config->dbEngine = '$DB_ENGINE';
\$config->userAuthSalt = '$USER_AUTH_SALT';
\$config->tableSalt = '$TABLE_SALT';
\$config->httpHosts = array('$HOST');
\$config->debug = $DB_DEBUG;
EOF

    log_ok "config-local-$ENV_LOWER.php created in public/site/ for $ENV"
}


create_local_config() {
    VARS=(dbHost dbName dbUser dbPass dbPort dbCharset dbEngine userAuthSalt tableSalt httpHosts debug)
    # Use indexed arrays instead of associative arrays for bash 3.2+ compatibility
    KEYS=()
    VALUES=()
    
    for VAR in "${VARS[@]}"; do
        VALUE=$(awk -v v="$VAR" '
      $0 ~ "\\$config->"v"[[:space:]]*= " {
        sub(/^[^=]*=[[:space:]]*/, "", $0);
        sub(/;.*$/, "", $0);
        print $0;
        exit
      }
    ' "$CONFIG_MAIN")
        if [ -z "$VALUE" ] && [ -f "$CONFIG_MAIN.bak" ]; then
            VALUE=$(awk -v v="$VAR" '
        $0 ~ "\\$config->"v"[[:space:]]*= " {
          sub(/^[^=]*=[[:space:]]*/, "", $0);
          sub(/;.*$/, "", $0);
          print $0;
          exit
        }
      ' "$CONFIG_MAIN.bak")
        fi
        if [ -z "$VALUE" ]; then
            log_warn "Skipped: $VAR not found in config.php or config.php.bak"
        else
            KEYS+=("$VAR")
            VALUES+=("$VALUE")
        fi
    done
    
    if [ "$SKIP_LOCAL_CONFIG" -eq 0 ]; then
        cat >"$LOCAL_CONFIG" <<EOF
<?php
// Local config for development environment. Don't commit this file.
EOF
        # Process indexed arrays
        for i in "${!KEYS[@]}"; do
            write_config_line "${KEYS[$i]}" "${VALUES[$i]}"
        done
        log_ok "config-local.php was created for local development."
    fi
}

remove_config_lines_from_main() {
    SKIP_CONFIG_BAK=0
    if [ -f "$CONFIG_MAIN.bak" ]; then
        if ! ask_overwrite "$CONFIG_MAIN.bak" "config.php.bak"; then
            SKIP_CONFIG_BAK=1
        fi
    fi
    if [ ! -f "$CONFIG_MAIN.bak" ] && [ "$SKIP_CONFIG_BAK" -eq 0 ]; then
        sed -i.bak \
            -e '/dbHost/d' \
            -e '/dbName/d' \
            -e '/dbUser/d' \
            -e '/dbPass/d' \
            -e '/dbPort/d' \
            -e '/dbCharset/d' \
            -e '/dbEngine/d' \
            -e '/userAuthSalt/d' \
            -e '/tableSalt/d' \
            -e '/httpHosts/d' \
            -e '/debug/d' \
            "$CONFIG_MAIN"
        log_ok "config.php.bak was saved as a backup of your original config.php."
    else
        if [ "$SKIP_CONFIG_BAK" -eq 0 ]; then
            if [ -f "$CONFIG_MAIN.bak" ]; then
                rm -f "$CONFIG_MAIN.bak"
            fi
            sed -i.bak \
                -e '/dbHost/d' \
                -e '/dbName/d' \
                -e '/dbUser/d' \
                -e '/dbPass/d' \
                -e '/dbPort/d' \
                -e '/dbCharset/d' \
                -e '/dbEngine/d' \
                -e '/userAuthSalt/d' \
                -e '/tableSalt/d' \
                -e '/httpHosts/d' \
                -e '/debug/d' \
                "$CONFIG_MAIN"
            log_ok "config.php.bak was saved as a backup of your original config.php."
        fi
    fi
}

add_require_to_config() {
    REQUIRE_LINE='require __DIR__ . "/config-local.php";'
    if [ -f "$CONFIG_MAIN" ] && ! grep -q "$REQUIRE_LINE" "$CONFIG_MAIN"; then
        echo -e "\n// Split Config Pattern" >>"$CONFIG_MAIN"
        echo "$REQUIRE_LINE" >>"$CONFIG_MAIN"
        log_ok "Added require for config-local.php to config.php"
    fi
}

remove_comments_from_config() {
    # Remove comments and normalize whitespace
    awk '
    BEGIN { inblock=0; prev_empty=0; prev_line_printed=0 }
    /^\s*\/\*/ { inblock=1; next }
    inblock && /\*\// { inblock=0; next }
    inblock { next }
    /^\s*\/\// { next }
    /^\s*#/ { next }
    /^\s*$/ { 
        # Track empty lines but do not print immediately
        if (prev_empty == 0) {
            prev_empty = 1
        }
        next 
    }
    { 
        # If we had an empty line before this non-empty line, print one empty line
        if (prev_empty == 1 && NR > 1 && prev_line_printed == 1) {
            print ""
        }
        print
        prev_empty = 0
        prev_line_printed = 1
    }
    ' "$CONFIG_MAIN" > "$TMP_CONFIG" && mv "$TMP_CONFIG" "$CONFIG_MAIN"
}

final_cleanup() {
    # Simple cleanup to remove excess blank lines between config statements
    # First, collapse multiple empty lines into single empty lines
    sed '/^[[:space:]]*$/N;/^\n$/d' "$CONFIG_MAIN" > "$TMP_CONFIG"
    
    # Then format specific sections with proper spacing
    awk '
    /^<\?php/ { print $0; print ""; getline; print $0; print ""; next }
    /^\$config->/ { 
        if (prev_line == "config") {
            print $0
        } else {
            if (NR > 1 && prev_line != "empty") print ""
            print $0
        }
        prev_line = "config"
        next
    }
    /^require/ { 
        if (prev_line != "empty") print ""
        print $0
        prev_line = "require"
        next
    }
    /^[[:space:]]*$/ { 
        prev_line = "empty"
        next
    }
    { 
        if (prev_line == "empty") print ""
        print $0
        prev_line = "other"
    }
    ' "$TMP_CONFIG" > "$CONFIG_MAIN"
    
    # Remove the temp file
    rm -f "$TMP_CONFIG"
    
    log_ok "Config file formatting cleaned up"
}

upload_salts_to_github() {
    # Check if GitHub CLI is available and we're authenticated
    if ! command -v gh >/dev/null 2>&1; then
        if [ "$SILENT_FLAG" != "--silent" ]; then
            log_warn "GitHub CLI (gh) not found. Skipping salt upload to GitHub."
        fi
        return 0
    fi
    
    if ! gh auth status >/dev/null 2>&1; then
        if [ "$SILENT_FLAG" != "--silent" ]; then
            log_warn "GitHub CLI not authenticated. Skipping salt upload to GitHub."
        fi
        return 0
    fi
    
    # Check repository access
    if ! gh repo view "$REPO_FULL" >/dev/null 2>&1; then
        if [ "$SILENT_FLAG" != "--silent" ]; then
            log_warn "Cannot access repository $REPO_FULL. Skipping salt upload to GitHub."
        fi
        return 0
    fi
    
    if [ "$SILENT_FLAG" != "--silent" ]; then
        log_info "Uploading ProcessWire salts to GitHub environment secrets..."
    fi
    
    local salt_count=0
    local errors=0
    
    # Upload LOCAL environment salts (from config.php.bak)
    for salt_type in "USER_AUTH_SALT" "TABLE_SALT"; do
        # For LOCAL environment, get salts from the original config values
        local salt_value=""
        local config_var_name=""
        
        if [ "$salt_type" = "USER_AUTH_SALT" ]; then
            config_var_name="userAuthSalt"
        else
            config_var_name="tableSalt"
        fi
        
        # Extract salt from config.php.bak for LOCAL environment
        if [ -f "$CONFIG_MAIN.bak" ]; then
            salt_value=$(awk -v var="$config_var_name" '
                $0 ~ "\\$config->"var"[[:space:]]*=[[:space:]]*" {
                    sub(/^[^=]*=[[:space:]]*/, "", $0);
                    sub(/;.*$/, "", $0);
                    gsub(/['\''"]/, "", $0);
                    gsub(/[[:space:]]/, "", $0);
                    print $0;
                    exit
                }
            ' "$CONFIG_MAIN.bak")
        fi
        
        if [ -n "$salt_value" ]; then
            # Upload to LOCAL environment
            if gh secret set "$salt_type" --env "LOCAL" --body "$salt_value" --repo "$REPO_FULL" >/dev/null 2>&1; then
                salt_count=$((salt_count + 1))
                if [ "$SILENT_FLAG" != "--silent" ]; then
                    log_ok "Uploaded $salt_type to LOCAL environment"
                fi
            else
                errors=$((errors + 1))
                if [ "$SILENT_FLAG" != "--silent" ]; then
                    log_error "Failed to upload $salt_type to LOCAL environment"
                fi
            fi
        fi
    done
    
    # Upload environment-specific salts (generated/extracted for this environment)
    for salt_type in "USER_AUTH_SALT" "TABLE_SALT"; do
        local salt_var="${PREFIX}${salt_type}"
        local salt_value="${!salt_var:-}"
        
        if [ -n "$salt_value" ]; then
            # Upload to specific environment (e.g., PROD, STAGING)
            if gh secret set "$salt_type" --env "$ENV" --body "$salt_value" --repo "$REPO_FULL" >/dev/null 2>&1; then
                salt_count=$((salt_count + 1))
                if [ "$SILENT_FLAG" != "--silent" ]; then
                    log_ok "Uploaded $salt_type to $ENV environment"
                fi
            else
                errors=$((errors + 1))
                if [ "$SILENT_FLAG" != "--silent" ]; then
                    log_error "Failed to upload $salt_type to $ENV environment"
                fi
            fi
        fi
    done
    
    # Summary
    if [ "$SILENT_FLAG" != "--silent" ]; then
        if [ $salt_count -gt 0 ]; then
            log_ok "Uploaded $salt_count ProcessWire salts to GitHub environments"
        fi
        if [ $errors -gt 0 ]; then
            log_warn "$errors salt uploads failed"
        fi
    fi
}

main "$@"
