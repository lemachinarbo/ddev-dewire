#!/usr/bin/env bash
#ddev-generated
## Description: Sync files to the selected environment's server using rsync and environment-prefixed variables
## Usage: dw-sync [ENV]

set -euo pipefail
trap 'log_error "Command \"$BASH_COMMAND\" failed at line $LINENO"; exit 1' ERR

# Source common logging/colors and helpers
source "$(dirname "$0")/lib/common.sh"

if [[ "${1:-}" == "--help" ]]; then
    echo "dw-sync: Sync files to the selected environment's server using rsync."
    echo "Usage: ddev dw-sync [ENV] [--silent]"
    exit 0
fi

ROCKSHELL_PATH="$DDEV_APPROOT/RockShell"

verify_deployment_path() {
    echo
    #log_info "Deployment Safety Check"
    #log_info "Target: $REMOTE_USER_HOST:$REMOTE_PATH"
    
    # Basic safety checks
    if [ -z "$REMOTE_PATH" ]; then
        log_fatal "REMOTE_PATH is empty! This could cause deployment to home directory. Aborting."
        exit 1
    fi
    
    # Check for dangerous patterns
    if [[ "$REMOTE_PATH" =~ ^/home/[^/]+/?$ ]]; then
        log_fatal "REMOTE_PATH appears to be a home directory root: $REMOTE_PATH"
        log_fatal "This could overwrite your entire home directory! Please specify a subdirectory."
        exit 1
    fi
    
    # Verify remote path exists and is correct
    if ! ssh -i "$SSH_KEY_PATH" "$REMOTE_USER_HOST" "[ -d '$REMOTE_PATH' ]" 2>/dev/null; then
        log_error "Remote path '$REMOTE_PATH' does not exist!"
        log_ask "Create remote directory '$REMOTE_PATH'? [y/N]: "
        read -r create_dir
        if [[ ! $create_dir =~ ^[Yy]$ ]]; then
            log_fatal "Remote path verification failed. Aborting deployment."
            exit 1
        fi
        
        if ! ssh -i "$SSH_KEY_PATH" "$REMOTE_USER_HOST" "mkdir -p '$REMOTE_PATH'" 2>/dev/null; then
            log_fatal "Failed to create remote directory '$REMOTE_PATH'. Check permissions."
            exit 1
        fi
        log_ok "Created remote directory: $REMOTE_PATH"
    fi
    
    # Get confirmation unless in silent mode or lazy mode
    if [ "$SILENT_FLAG" != "--silent" ] && [ "$LAZY_MODE" != "true" ]; then
        echo
        log_warn "Syncing to: $REMOTE_USER_HOST:$REMOTE_PATH"
        log_info "Remote files may be overwritten. Check the path before proceeding!"
        log_ask "Continue? [Y/n]: "
        read -r confirm_deploy
        confirm_deploy=${confirm_deploy:-Y}  # Default to Y if empty
        if [[ ! $confirm_deploy =~ ^[Yy]$ ]]; then
            log_info "Deployment cancelled by user."
            exit 0
        fi
    elif [ "$LAZY_MODE" = "true" ]; then
        log_info "Lazy mode: Auto-accepting deployment to $REMOTE_USER_HOST:$REMOTE_PATH"
    fi
    
    log_ok "Deployment path verified: $REMOTE_PATH"
}

# Main script execution
main() {
    # Parse script arguments
    parse_script_args "$@"
    
    validate_and_load_env "${PARSED_ARGS[0]:-}" "$SILENT_FLAG"
    
    # Set PW_ROOT early if not already set
    PW_ROOT="${PW_ROOT:-$DDEV_DOCROOT}"
    
    ENV_LOWER=$(to_lower "$ENV")
    HTACCESS_OPTION="$(get_env_var "$PREFIX" HTACCESS_OPTION "$ENV_FILE")"
    
    # Safety checks before proceeding
    verify_deployment_path
    check_source_directories
    update_htaccess
    setup_config
    rsync_deploy
    restore_config_files
}

check_source_directories() {
    if [ ! -d "$PW_ROOT" ]; then
        log_error "Source directory PW_ROOT ('$PW_ROOT') does not exist. Aborting deployment."
        exit 1
    fi
    if [ ! -d "$ROCKSHELL_PATH" ]; then
        log_error "RockShell directory '$ROCKSHELL_PATH' does not exist. Aborting deployment."
        exit 1
    fi
}

update_htaccess() {
    echo
    HTACCESS_FILE="$PW_ROOT/.htaccess"
    if [ -f "$HTACCESS_FILE" ]; then
        log_info "Ensuring correct .htaccess Options settings in $HTACCESS_FILE..."
        NEED_HTACCESS_UPDATE=false
        HTACCESS_OPTION_LOWER=$(to_lower "$HTACCESS_OPTION")
        if [[ "$HTACCESS_OPTION_LOWER" == "followsymlinks" ]]; then
            if ! grep -q '^Options +FollowSymLinks' "$HTACCESS_FILE"; then
                NEED_HTACCESS_UPDATE=true
            fi
        elif [[ "$HTACCESS_OPTION_LOWER" == "symlinksifownermatch" ]]; then
            if ! grep -q '^Options +SymLinksIfOwnerMatch' "$HTACCESS_FILE"; then
                NEED_HTACCESS_UPDATE=true
            fi
        fi
        if [ "$NEED_HTACCESS_UPDATE" = true ]; then
            sed_inplace 's/^[[:space:]]*[#]*[[:space:]]*Options[[:space:]]+\+FollowSymLinks/# Options +FollowSymLinks/I' "$HTACCESS_FILE"
            sed_inplace 's/^[[:space:]]*[#]*[[:space:]]*Options[[:space:]]+\+SymLinks[Ii]fOwnerMatch/# Options +SymLinksIfOwnerMatch/I' "$HTACCESS_FILE"
            if [[ "$HTACCESS_OPTION_LOWER" == "followsymlinks" ]]; then
                sed_inplace 's/^# Options[[:space:]]+\+FollowSymLinks/Options +FollowSymLinks/I' "$HTACCESS_FILE"
                log_ok ".htaccess set to: Options +FollowSymLinks"
            elif [[ "$HTACCESS_OPTION_LOWER" == "symlinksifownermatch" ]]; then
                sed_inplace 's/^# Options[[:space:]]+\+SymLinks[Ii]fOwnerMatch.*/Options +SymLinksIfOwnerMatch/' "$HTACCESS_FILE"
                log_ok ".htaccess set to: Options +SymLinksIfOwnerMatch"
            else
                log_warn "Both Options directives in .htaccess are commented out (no override set)."
            fi
        else
            log_info ".htaccess already set correctly, skipping update."
        fi
    fi
}

setup_config() {
    TMP_CONFIG_DIR="$DDEV_APPROOT/tmp_config_backup"
    mkdir -p "$TMP_CONFIG_DIR"
    log_info "Backing up all config-local-*.php, config-local.php, and config.php.bak..."
    for f in public/site/config-local-*.php public/site/config-local.php public/site/config.php.bak; do
      if [ -f "$f" ]; then
        mv "$f" "$TMP_CONFIG_DIR/" && log_ok "Moved $f to $TMP_CONFIG_DIR/"
      fi
    done
    if [ -n "$ENV_LOWER" ] && [ -f "$TMP_CONFIG_DIR/config-local-$ENV_LOWER.php" ]; then
      REMOTE_CONFIG="$REMOTE_PATH/public/site/config-local.php"
      LOCAL_CONFIG="$TMP_CONFIG_DIR/config-local-$ENV_LOWER.php"
      if ssh -i "$SSH_KEY_PATH" "$REMOTE_USER_HOST" "cmp -s $REMOTE_CONFIG -" < "$LOCAL_CONFIG"; then
        log_info "Remote config-local.php already matches environment config, skipping upload."
      else
        log_ok "Copying $TMP_CONFIG_DIR/config-local-$ENV_LOWER.php to public/site/config-local.php for upload."
        cp "$TMP_CONFIG_DIR/config-local-$ENV_LOWER.php" "public/site/config-local.php"
      fi
    else
      log_error "No environment config found for $ENV_LOWER. Skipping config-local.php upload."
    fi
}

rsync_deploy() {
    RSYNC_LOG="$APP_PATH/logs/rsync_errors.log"
    echo
    log_info "Starting rsync deployment..."
    RSYNC_EXCLUDES=(--exclude='.env' --exclude='tmp_config_backup/' --exclude='.deployignore')
    # Add .deployignore if it exists
    if [ -f "$DDEV_APPROOT/.deployignore" ]; then
        RSYNC_EXCLUDES+=(--exclude-from="$DDEV_APPROOT/.deployignore")
        log_ok "Excluding files and folders listed in .deployignore..."
    fi
    
    # Change to project root for rsync
    cd "$DDEV_APPROOT"
    
    # Show what would be transferred (dry run first for safety)
    if [ "$SILENT_FLAG" != "--silent" ] && [ "$LAZY_MODE" != "true" ]; then
        echo
        log_info "Dry run - showing what would be transferred:"
        rsync -avz --dry-run --omit-dir-times -e "ssh -i $SSH_KEY_PATH" \
          "${RSYNC_EXCLUDES[@]}" \
          . "$REMOTE_USER_HOST:$REMOTE_PATH" | head -20
        echo "... (showing first 20 items)"
        echo
        log_ask "Proceed with actual file transfer? [Y/n]: "
        read -r proceed_rsync
        proceed_rsync=${proceed_rsync:-Y}  # Default to Y if empty
        if [[ ! $proceed_rsync =~ ^[Yy]$ ]]; then
            log_info "Rsync deployment cancelled by user."
            exit 0
        fi
    elif [ "$LAZY_MODE" = "true" ]; then
        log_info "Lazy mode: Skipping dry run and confirmation"
    fi
    
    # Actual rsync deployment
    rsync -avz --omit-dir-times -e "ssh -i $SSH_KEY_PATH" \
      "${RSYNC_EXCLUDES[@]}" \
      . "$REMOTE_USER_HOST:$REMOTE_PATH" 2>"$RSYNC_LOG"
    RSYNC_EXIT_CODE=$?
    echo
    if [ $RSYNC_EXIT_CODE -eq 0 ]; then
        log_ok "Deployment completed successfully."
        
        # Set proper permissions after deployment - ONLY within the deployment path
        log_info "Setting file permissions on remote server..."
        if ssh -i "$SSH_KEY_PATH" "$REMOTE_USER_HOST" "cd '$REMOTE_PATH' && find . -maxdepth 10 -type d -exec chmod $CHMOD_DIR {} + 2>/dev/null && find . -maxdepth 10 -type f -exec chmod $CHMOD_FILE {} + 2>/dev/null"; then
            log_ok "File permissions set successfully (directories: $CHMOD_DIR, files: $CHMOD_FILE)."
        else
            log_error "Failed to set file permissions. Files may need manual permission adjustment."
        fi
    elif [ $RSYNC_EXIT_CODE -eq 23 ]; then
        log_warn "Deployment completed with some warnings (exit code 23)."
        log_info "Some files may not have transferred completely, but the deployment likely succeeded."
        log_info "Check $RSYNC_LOG for details."
        # Don't exit with error for code 23 - it's often just warnings
    else
        log_error "Deployment failed! Rsync exited with code $RSYNC_EXIT_CODE."
        if grep -q 'No such file or directory' "$RSYNC_LOG"; then
            log_error "Error: One or more source or destination directories do not exist. Check your PW_ROOT, RockShell folder, and DEPLOY_PATH settings."
        elif grep -q 'Permission denied' "$RSYNC_LOG"; then
            log_error "Error: Permission denied. Check your SSH credentials, key permissions, and server access."
        else
            log_error "Please check your SSH credentials, permissions, server status, and source/destination directories, then fix any issues and run the script again."
        fi
        log_error "See $RSYNC_LOG for details on what went wrong."
        exit 1
    fi
}

restore_config_files() {
    rm -f public/site/config-local.php && log_ok "Removed temporary config-local.php after upload."
    mv "$TMP_CONFIG_DIR"/* public/site/ 2>/dev/null && log_ok "Restored original config files from backup." || true
    rmdir "$TMP_CONFIG_DIR"
}

main "$@"

